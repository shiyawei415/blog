<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[VUE基础篇]]></title>
    <url>%2F2017%2F07%2F20%2FVUE%E5%9F%BA%E7%A1%80%E7%AF%87%2F</url>
    <content type="text"><![CDATA[前言 话不多说，希望大家可以学到更多！ . Vue.js API(英文). Vue.js API(中文). Vue.js 开源网站. 在线编辑器 一、Vue基础介绍Vue.js 是什么Vue.js是当下很火的一个JavaScript MVVM库，它是以数据驱动和组件化的思想构建的。相比于Angular.js，Vue.js提供了更加简洁、更易于理解的API，使得我们能够快速地上手并使用Vue.js。 如果你之前已经习惯了用jQuery操作DOM，学习Vue.js时请先抛开手动操作DOM的思维，因为Vue.js是数据驱动的，你无需手动操作DOM。它通过一些特殊的HTML语法，将DOM和数据绑定起来。一旦你创建了绑定，DOM将和数据保持同步，每当变更了数据，DOM也会相应地更新。 当然了，在使用Vue.js时，你也可以结合其他库一起使用，比如jQuery 二、vue和其他MVVM大比拼关于MVVM，目前市面上比较火的MVVM框架也是一抓一大把，比如常见的有Knockout.js、Vue.js、AvalonJS、Angularjs等，每一款都有它们自己的优势。 Knockout：微软出品，可以说是MVVM的模型领域内的先驱，使用函数偷龙转凤，最短编辑长度算法实现DOM的同步，兼容IE6，实现高超，但源码极其难读，最近几年发展缓慢。 Vue：是最近几年出来的一个开源Javascript框架，语法精简，实现精致，但对浏览器的支持受限，最低只能支持IE9。 AvalonJS：是一个简单易用迷你的MVVM框架，由大神司徒正美研发。使用简单，实现明快。 React：React并不属于MVVM架构，但是它带来virtual dom的革命性概念，受限于视图的规模。 Angularjs：Google出品，已经被用于Google的多款产品当中。AngularJS有着诸多特性，最为核心的是：MVC、模块化、自动化双向数据绑定、语义化标签、依赖注入等等。入门容易上手难，大量避不开的概念也是很头疼的。 更多MVVM框架优缺点比较，可以看下 这里 。 三、Vue基础入门1、MVVM图例说到MVVM，先来看看下面下面这张图 这张图足以说明MVVM的核心功能，在这三者里面，ViewModel无疑起着重要的桥梁作用。 一方面，通过ViewModel将Model的数据绑定到View的Dom元素上面，当Model里面的数据发生变化的时候，通过ViewModel里面数据绑定的机制，触发View里面Dom元素的变化； 另一方面，又通过ViewModel来监听View里面的Dom元素的数据变化，当页面上面的Dom元素发生变化的时候，ViewModel通过Dom树的监听机制，触发对应的Model的数据变化。 当然在Vue.js里面ViewModel也是核心部件，它就是一个Vue实例。这个实例作用于单个或者多个html元素，从而实现Dom树监听和数据绑定的双向更新操作。 2、第一个Vue实例关于第一个实例，无疑是最简单的应用。要使用vue，不用多说，肯定是先去github上面下载源码喽，然后引入到我们的项目中来，需要引用的js就一个vue.js，版本是2.0.5。 先来看一个最简单的例子： 123456789101112131415161718192021222324&lt;body&gt; &lt;div id=&quot;app&quot;&gt; &lt;h1&gt;姓名：&#123;&#123; Name &#125;&#125;&lt;/h1&gt; &lt;h1&gt;年龄：&#123;&#123; Age &#125;&#125;&lt;/h1&gt; &lt;h1&gt;学校：&#123;&#123; School &#125;&#125;&lt;/h1&gt; &lt;/div&gt; &lt;script src=&quot;Content/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; //Model var data = &#123; Name: &apos;小明&apos;, Age: 18, School:&apos;光明小学&apos;, &#125; //ViewModel var vue = new Vue(&#123; el: &apos;#app&apos;, data: data, &#125;); &lt;/script&gt;&lt;/body&gt; 这段代码不难理解，我们的Model就是data变量，而ViewModel就是这里的new Vue()得到的对象。这里两个最简单的属性相信大家一看就能明白。 el：表示绑定的Dom元素，此例子中表示的是父级的Dom元素。 data：需要绑定的数据Model。 如果仅仅是展示，只需要 姓名： 这样写就好了。运行的效果如下： 值得一提的是 这种写法仅仅只能实现单向绑定，只有在Model里面数据发生变化的时候会触发界面Dom元素的变化，反之并不能触发Model数据的变化。可以通过浏览器的Console来验证这一理论。 那么，对于双向绑定的机制，Vue是如何实现的呢？ 3、双向绑定vue里面提供了v-model指令，为我们方便实现Model和View的双向绑定，使用也非常简单。还是上文的例子，我们加入一个文本框，里面使用v-model指令。 123456789101112131415161718192021222324&lt;body&gt; &lt;div id=&quot;app&quot;&gt; &lt;h1&gt;编辑姓名：&lt;input type=&quot;text&quot; v-model=&quot;Name&quot; /&gt;&lt;/h1&gt; &lt;h1&gt;姓名：&#123;&#123; Name &#125;&#125;&lt;/h1&gt; &lt;h1&gt;年龄：&#123;&#123; Age &#125;&#125;&lt;/h1&gt; &lt;h1&gt;学校：&#123;&#123; School &#125;&#125;&lt;/h1&gt; &lt;/div&gt; &lt;script src=&quot;Content/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; //Model var data = &#123; Name: &apos;小明&apos;, Age: 18, School:&apos;光明小学&apos;, &#125; //ViewModel var vue = new Vue(&#123; el: &apos;#app&apos;, data: data, &#125;); &lt;/script&gt;&lt;/body&gt; 得到效果： 双向绑定效果展示： 通过v-model指令，很方便的实现了Model和View之间的双向绑定。单从这种绑定的方式来看，还是比Knockout要简单一点，至少不用区分什么普通属性和监控属性。 四、常用指令本来按照Vue文档说明，常用指令应该是放在后面介绍的，但是从使用的层面考虑，先介绍常用指令还是非常必要的，因为博主觉得这些指令是我们入手使用Vue的桥梁，没有这些基石，一切的高级应用都是空话。 Vue里面为我们提供的常用指令主要有以下一些。 v-text v-html v-if v-show v-else v-for v-on v-bind v-model v-pre v-cloak v-once 每一个指令都可以链接到相关文档，博主觉得文档里面每种指令的语法写得非常详细，在此就没必要重复做说明了，下面博主打算将一些常用的指令以分组的形式分别结合demo来进行解释说明。 1、v-text、v-html指令v-text、v-html这两者分为一组很好理解，一个用于绑定文本，一个用于绑定html。上文使用到的 这种写法就是v-text的的缩写形式。这个很简单，没什么好纠结的，看一个Demo就能明白。 1234567891011121314151617181920212223&lt;body&gt; &lt;div id=&quot;app&quot;&gt; &lt;h1&gt;姓名：&lt;label v-text=&quot;Name&quot;&gt;&lt;/label&gt;&lt;/h1&gt; &lt;h1&gt;姓名：&#123;&#123; Name &#125;&#125;&lt;/h1&gt; &lt;div style=&quot;font-size:30px;font-weight:bold;&quot; v-html=&quot;Age&quot;&gt;年龄：&lt;/div&gt; &lt;/div&gt; &lt;script src=&quot;Content/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; //Model var data = &#123; Name: &apos;小明&apos;, Age: &quot;&lt;label&gt;20&lt;/label&gt;&quot;, School:&apos;光明小学&apos;, &#125; //ViewModel var vue = new Vue(&#123; el: &apos;#app&apos;, data: data, &#125;); &lt;/script&gt;&lt;/body&gt; 效果如下： 代码说明： 这种写法和v-text的作用是相同的，用于绑定标签的text属性。注意如果标签没有text属性，该绑定会失效，比如你在一个文本框上面使用v-text是没有效果的 由得到的效果可以看出，v-html绑定后会覆盖原来标签里面的内容（比如上面的“年龄：”），记住此处是覆盖而非append。 对于v-html应用的时候要慎重，在网站上动态渲染任意 HTML 有一定的危险存在，因为容易导致 XSS 跨站脚本攻击。所以最好是在信任的网址上面使用。 注意v-text和v-html绑定都是单向的，只能从Model到View的绑定，不能实现View到Model的更新。 2、v-model指令v-model上面有介绍它的双向绑定功能，对于v-model指令，vue限定只能对表单控件进行绑定，常见的有&lt;input&gt;、``&lt;select&gt;、``&lt;textarea&gt;等。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;body&gt; &lt;div id=&quot;app&quot;&gt; &lt;h2&gt;编辑姓名：&lt;input type=&quot;text&quot; v-model=&quot;Name&quot; /&gt;&lt;/h2&gt; &lt;h2&gt;姓名：&#123;&#123;Name&#125;&#125;&lt;/h2&gt; &lt;hr /&gt; &lt;h2&gt;编辑备注：&lt;textarea v-model=&quot;Remark&quot;&gt;&lt;/textarea&gt;&lt;/h2&gt; &lt;h2&gt;备注：&#123;&#123;Remark&#125;&#125;&lt;/h2&gt; &lt;hr /&gt; &lt;input type=&quot;checkbox&quot; id=&quot;basketball&quot; value=&quot;篮球&quot; v-model=&quot;Hobby&quot;&gt; &lt;label for=&quot;basketball&quot;&gt;篮球&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;football&quot; value=&quot;足球&quot; v-model=&quot;Hobby&quot;&gt; &lt;label for=&quot;football&quot;&gt;足球&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;running&quot; value=&quot;跑步&quot; v-model=&quot;Hobby&quot;&gt; &lt;label for=&quot;running&quot;&gt;跑步&lt;/label&gt; &lt;br&gt; &lt;h2&gt;学生爱好： &#123;&#123; Hobby &#125;&#125;&lt;/h2&gt; &lt;hr /&gt; &lt;h2&gt;户籍：&#123;&#123; Huji &#125;&#125;&lt;/h2&gt; &lt;select style=&quot;width:100px;&quot; class=&quot;form-control&quot; v-model=&quot;Huji&quot;&gt; &lt;option&gt;湖南&lt;/option&gt; &lt;option&gt;广东&lt;/option&gt; &lt;option&gt;北京&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;script src=&quot;Content/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; //Model var data = &#123; Name: &apos;小明&apos;, Age: 18, School: &apos;光明小学&apos;, Hobby: [], Remark: &apos;三好学生&apos;, Huji:&quot;&quot; &#125; //ViewModel var vue = new Vue(&#123; el: &apos;#app&apos;, data: data, &#125;); &lt;/script&gt;&lt;/body&gt; 以上列举了v-model的一些常见用法，应该都不难，基本都是双向绑定，效果如下： 关于selece的数据源的动态绑定，我们留在v-for指令的时候介绍。 3、v-if、v-else指令 v-if和v-else是一对离不开的好兄弟，使用条件运算符判断时常用。需要说明的是，v-if可以单独使用，但是v-else的前面必须要有一个v-if的条件或者v-show指令（后面介绍），这个和我们编程的原理是一样一样的。 它们作为条件渲染指令，他们的基础语法如下： 12345678910111213141516171819202122232425&lt;body&gt; &lt;div id=&quot;app&quot;&gt; &lt;h1&gt;姓名：&lt;label v-text=&quot;Name&quot;&gt;&lt;/label&gt;&lt;/h1&gt; &lt;h1&gt;是否已婚：&lt;span v-if=&quot;IsMarry&quot;&gt;是&lt;/span&gt;&lt;/h1&gt; &lt;h1&gt;大人or小孩：&lt;span v-if=&quot;Age&gt;18&quot;&gt;大人&lt;/span&gt;&lt;span v-else&gt;小屁孩&lt;/span&gt;&lt;/h1&gt; &lt;h1&gt;学校：&#123;&#123; School &#125;&#125;&lt;/h1&gt; &lt;/div&gt; &lt;script src=&quot;Content/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; //Model var data = &#123; Name: &apos;小明&apos;, IsMarry: true, Age: 20, School:&apos;光明小学&apos;, &#125; //ViewModel var vue = new Vue(&#123; el: &apos;#app&apos;, data: data, &#125;); &lt;/script&gt;&lt;/body&gt; 得到结果： 只有有一点编程基础，上述应该不难看懂。 4、v-show指令v-show指令表示根据表达式之bool值，觉得是否显示该元素。需要说明的是，如果bool值false，对应的Dom标签还是会渲染到页面上面，只是将该标签的css属性display设为none而已。而如果你用v-if值，bool值为false的时候整个dom树都不被渲染到页面上面。从这点上来说看，如果你的需求是需要经常切换元素的显示和隐藏，使用v-show效率更高，而如果你只做一次条件判断，使用v-if更加合适。 v-show还常和v-else一起使用，表示如果v-show条件满足，则显示当前标签，否则显示v-else标签。 123456789101112131415161718192021222324&lt;body&gt; &lt;div id=&quot;app&quot;&gt; &lt;h1&gt;姓名：&lt;label v-text=&quot;Name&quot;&gt;&lt;/label&gt;&lt;/h1&gt; &lt;h1&gt;是否已婚：&lt;span v-show=&quot;IsMarry&quot;&gt;是&lt;/span&gt;&lt;/h1&gt; &lt;h1&gt;学校：&#123;&#123; School &#125;&#125;&lt;/h1&gt; &lt;/div&gt; &lt;script src=&quot;Content/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; //Model var data = &#123; Name: &apos;小明&apos;, IsMarry: false, Age: 16, School:&apos;光明小学&apos;, &#125; //ViewModel var vue = new Vue(&#123; el: &apos;#app&apos;, data: data, &#125;); &lt;/script&gt;&lt;/body&gt; 得到效果： 5、v-for指令 v-for 指令需要以 item in items 形式的特殊语法。常用来绑定数据对象。 最简单的例子： 123456789101112131415161718&lt;body&gt; &lt;div id=&quot;app&quot;&gt; &lt;ul&gt; &lt;li v-for=&quot;value in nums&quot;&gt;&#123;&#123;value&#125;&#125;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;script src=&quot;Content/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; //ViewModel var vue = new Vue(&#123; el: &apos;#app&apos;, data: &#123; nums: [1, 2, 3, 4, 5, 6, 7, 8, 9] &#125; &#125;); &lt;/script&gt;&lt;/body&gt; 效果： 除了基础数据之外，还支持Json数组的绑定。比如： 12345678910111213141516&lt;div id=&quot;app&quot;&gt; &lt;ul&gt; &lt;li v-for=&quot;value in values&quot;&gt;姓名：&#123;&#123;value.Name&#125;&#125;，年龄：&#123;&#123;value.Age&#125;&#125;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;script src=&quot;Content/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; //ViewModel var vue = new Vue(&#123; el: &apos;#app&apos;, data: &#123; values: [&#123; Name: &quot;小明&quot;, Age: 20 &#125;, &#123; Name: &quot;小刚&quot;, Age: 18 &#125;, &#123; Name: &quot;小红&quot;, Age: 16 &#125;] &#125; &#125;); &lt;/script&gt; 效果： 在v-for里面，可以使用&lt;template&gt; 标签来渲染多个元素块，下面就基于bootstrap样式使用v-for、v-if、v-else等实现一个简单的demo。 1234567891011121314151617181920212223&lt;div id=&quot;app&quot;&gt; &lt;nav&gt; &lt;ul class=&quot;pagination pagination-lg&quot;&gt; &lt;template v-for=&quot;page in pages &quot;&gt; &lt;li v-if=&quot;page==1&quot; class=&quot;disabled&quot;&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt; &lt;li v-if=&quot;page==1&quot; class=&quot;active&quot;&gt;&lt;a href=&quot;#&quot;&gt;&#123;&#123;page&#125;&#125;&lt;/a&gt;&lt;/li&gt; &lt;li v-else&gt;&lt;a href=&quot;#&quot;&gt;&#123;&#123;page&#125;&#125;&lt;/a&gt;&lt;/li&gt; &lt;li v-if=&quot;page==pages&quot;&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt; &lt;/template&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;/div&gt; &lt;script src=&quot;Content/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; //ViewModel var vue = new Vue(&#123; el: &apos;#app&apos;, data: &#123; pages: 10 &#125; &#125;); &lt;/script&gt; 得到效果 是不是很easy！需要说明一点的是，pages是10，然后遍历它的时候，page的值会从1依次到10。 v-for指令除了支持数据对象的迭代以外，还支持普通Json对象的迭代，比如： 123456789101112131415161718192021&lt;div id=&quot;app&quot;&gt; &lt;ul&gt; &lt;li v-for=&quot;(value, key) in values&quot;&gt; &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125; &lt;/li&gt; &lt;li v-for=&quot;(value, key, index) in values&quot;&gt; &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;script src=&quot;Content/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; //ViewModel var vue = new Vue(&#123; el: &apos;#app&apos;, data: &#123; values: &#123; Name: &quot;小明&quot;, Age: 20, School: &quot;**高中&quot; &#125; &#125; &#125;); &lt;/script&gt; 得到效果： 6、v-once指令v-once表示只渲染元素和组件一次。随后的重新渲染,元素/组件及其所有的子节点将被视为静态内容并跳过。什么意思呢？还是来看demo说话： 123456789101112131415161718192021&lt;div id=&quot;app&quot;&gt; &lt;h1&gt;姓名：&lt;label v-once v-text=&quot;Name&quot;&gt;&lt;/label&gt;&lt;/h1&gt; &lt;h1 v-once&gt;年龄：&#123;&#123; Age &#125;&#125;&lt;/h1&gt; &lt;h1&gt;学校：&#123;&#123; School &#125;&#125;&lt;/h1&gt; &lt;/div&gt; &lt;script src=&quot;Content/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; //Model var data = &#123; Name: &apos;小明&apos;, Age: 18, School:&apos;光明小学&apos;, &#125; //ViewModel var vue = new Vue(&#123; el: &apos;#app&apos;, data: data, &#125;); &lt;/script&gt; 效果动态图： 可以看出，只要使用v-once指令的，View和Model之间除了初次渲染同步，之后便不再同步，而同一次绑定里面没使用v-once指令的还是会继续同步。 7、v-bind指令 对于html标签的text、value等属性，Vue里面提供了v-text、v-model去绑定。但是对于除此之外的其他属性呢，这就要用到接下来要讲的v-bind指令了。博主的理解是v-bind的作用是绑定除了text、value之外的其他html标签属性，常见的比如class、style、自定义标签的自定义属性等。它的语法如下： 1234567891011121314151617181920212223242526272829303132333435363738&lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;link href=&quot;Content/bootstrap/css/bootstrap.css&quot; rel=&quot;stylesheet&quot; /&gt; &lt;style type=&quot;text/css&quot;&gt; class1 &#123; padding:20px; &#125; .backred &#123; background-color:red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;app&quot;&gt; &lt;h1&gt;姓名：&lt;label v-text=&quot;Name&quot;&gt;&lt;/label&gt;&lt;/h1&gt; &lt;h1&gt;是否红领巾：&lt;span class=&quot;class1&quot; v-bind:class=&quot;&#123;backred:IsBack&#125;&quot;&gt;&lt;label v-if=&quot;IsBack&quot;&gt;是&lt;/label&gt;&lt;/span&gt;&lt;/h1&gt; &lt;h1&gt;学校星级：&lt;span v-bind:style=&quot;&#123;color:SchoolLevel&#125;&quot;&gt;aa&lt;/span&gt;&lt;/h1&gt; &lt;/div&gt; &lt;script src=&quot;Content/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; //Model var data = &#123; Name: &apos;小明&apos;, Age: 18, School: &apos;光明小学&apos;, SchoolLevel: &apos;red&apos;, IsBack:true &#125; //ViewModel var vue = new Vue(&#123; el: &apos;#app&apos;, data: data, &#125;); &lt;/script&gt;&lt;/body&gt; 需要说明的是同一个标签里面的同一个属性，可以既有绑定的写法，也有静态的写法，组件会自动帮你合并，比如上文中的class属性。 得到效果如下： 关于自定义属性的绑定，打算在综合应用里面来说。 8、v-on指令属性jquery的朋友应该很熟悉这个“on”，对于时间的监听和绑定，jquery里面最常用的就是on了。同样，在Vue里面，v-on指令用来绑定标签的事件，其语法和v-bind基本类似。 123456789101112131415161718192021&lt;div id=&quot;app&quot;&gt; &lt;h1&gt;姓名：&lt;label v-text=&quot;Name&quot;&gt;&lt;/label&gt;&lt;/h1&gt; &lt;h1&gt;年龄：&#123;&#123; Age &#125;&#125;&lt;/h1&gt; &lt;button class=&quot;btn btn-primary&quot; v-on:click=&quot;Age++;if(Name==&apos;小明&apos;)Name=&apos;吉姆格林&apos;;else Name=&apos;小明&apos;;&quot;&gt;年龄递增&lt;/button&gt; &lt;/div&gt; &lt;script src=&quot;Content/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; //Model var data = &#123; Name: &apos;小明&apos;, Age: 18, &#125; //ViewModel var vue = new Vue(&#123; el: &apos;#app&apos;, data: data, &#125;); &lt;/script&gt; 这段代码是一个最简单的应用，直接在click事件里面执行逻辑，改变变量的值。效果如下： 除了直接在标签内写处理逻辑，还可以定义方法事件处理器。 12345678910111213141516171819202122232425262728&lt;div id=&quot;app&quot;&gt; &lt;h1&gt;姓名：&lt;label v-text=&quot;Name&quot;&gt;&lt;/label&gt;&lt;/h1&gt; &lt;h1&gt;年龄：&#123;&#123; Age &#125;&#125;&lt;/h1&gt; &lt;button class=&quot;btn btn-primary&quot; v-on:click=&quot;Hello&quot;&gt;Hello&lt;/button&gt; &lt;/div&gt; &lt;script src=&quot;Content/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; //Model var data = &#123; Name: &apos;小明&apos;, Age: 18, &#125; //ViewModel var vue = new Vue(&#123; el: &apos;#app&apos;, data: data, methods: &#123; Hello: function (event) &#123; // `this` 在方法里指当前 Vue 实例 alert(&apos;Hello &apos; + this.Name + &apos;!&apos;); this.Age++; &#125; &#125; &#125;); &lt;/script&gt; 结果应该不难猜。 9、实例一：30分钟搞定增删改查有了我们的Vue框架，关于行内编辑的增删改查，我们很简单即可实现，如果你熟的话应该还不用30分钟吧。代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;link href=&quot;Content/bootstrap/css/bootstrap.css&quot; rel=&quot;stylesheet&quot; /&gt; &lt;style type=&quot;text/css&quot;&gt; table thead tr th &#123; text-align:center; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div style=&quot;padding:20px;&quot; id=&quot;app&quot;&gt; &lt;div class=&quot;panel panel-primary&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt;用户管理&lt;/div&gt; &lt;table class=&quot;table table-bordered table-striped text-center&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;用户名&lt;/th&gt; &lt;th&gt;年龄&lt;/th&gt; &lt;th&gt;毕业学校&lt;/th&gt; &lt;th&gt;备注&lt;/th&gt; &lt;th&gt;操作&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;template v-for=&quot;row in rows &quot;&gt; &lt;tr&gt;&lt;td&gt;&#123;&#123;row.Name&#125;&#125;&lt;/td&gt;&lt;td&gt;&#123;&#123;row.Age&#125;&#125;&lt;/td&gt;&lt;td&gt;&#123;&#123;row.School&#125;&#125;&lt;/td&gt;&lt;td&gt;&#123;&#123;row.Remark&#125;&#125;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;#&quot; @click=&quot;Edit(row)&quot;&gt;编辑&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;#&quot; @click=&quot;Delete(row.Id)&quot;&gt;删除&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/template&gt; &lt;tr&gt; &lt;td&gt;&lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;rowtemplate.Name&quot; /&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;rowtemplate.Age&quot; /&gt;&lt;/td&gt; &lt;td&gt;&lt;select class=&quot;form-control&quot; v-model=&quot;rowtemplate.School&quot;&gt; &lt;option&gt;中山小学&lt;/option&gt; &lt;option&gt;复兴中学&lt;/option&gt; &lt;option&gt;光明小学&lt;/option&gt; &lt;/select&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;rowtemplate.Remark&quot; /&gt;&lt;/td&gt; &lt;td&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; v-on:click=&quot;Save&quot;&gt;保存&lt;/button&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src=&quot;Content/jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;Content/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; //Model var data = &#123; rows: [ &#123; Id: 1, Name: &apos;小明&apos;, Age: 18, School: &apos;光明小学&apos;, Remark: &apos;三好学生&apos; &#125;, &#123; Id: 2, Name: &apos;小刚&apos;, Age: 20, School: &apos;复兴中学&apos;, Remark: &apos;优秀班干部&apos; &#125;, &#123; Id: 3, Name: &apos;吉姆格林&apos;, Age: 19, School: &apos;光明小学&apos;, Remark: &apos;吉姆做了汽车公司经理&apos; &#125;, &#123; Id: 4, Name: &apos;李雷&apos;, Age: 25, School: &apos;复兴中学&apos;, Remark: &apos;不老实的家伙&apos; &#125;, &#123; Id: 5, Name: &apos;韩梅梅&apos;, Age: 22, School: &apos;光明小学&apos;, Remark: &apos;在一起&apos; &#125;, ], rowtemplate: &#123; Id: 0, Name: &apos;&apos;, Age: &apos;&apos;, School: &apos;&apos;, Remark: &apos;&apos; &#125; &#125;; //ViewModel var vue = new Vue(&#123; el: &apos;#app&apos;, data: data, methods: &#123; Save: function (event) &#123; if (this.rowtemplate.Id == 0) &#123; //设置当前新增行的Id this.rowtemplate.Id = this.rows.length + 1; this.rows.push(this.rowtemplate); &#125; //还原模板 this.rowtemplate = &#123; Id: 0, Name: &apos;&apos;, Age: &apos;&apos;, School: &apos;&apos;, Remark: &apos;&apos; &#125; &#125;, Delete: function (id) &#123; //实际项目中参数操作肯定会涉及到id去后台删除，这里只是展示，先这么处理。 for (var i=0;i&lt;this.rows.length;i++)&#123; if (this.rows[i].Id == id) &#123; this.rows.splice(i, 1); break; &#125; &#125; &#125;, Edit: function (row) &#123; this.rowtemplate = row; &#125; &#125; &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 行内编辑效果如下： 10、实例二：带分页的表格上面的例子用最简单的方式实现了一个增删改查，为了进一步体验我们Vue的神奇，博主更进了一步，用Vue去做了一个客户端分页的表格功能。其实代码量并不大。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;link href=&quot;Content/bootstrap/css/bootstrap.css&quot; rel=&quot;stylesheet&quot; /&gt; &lt;style type=&quot;text/css&quot;&gt; table thead tr th &#123; text-align: center; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div style=&quot;padding:20px;&quot; id=&quot;app&quot;&gt; &lt;div class=&quot;panel panel-primary&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt;用户管理&lt;/div&gt; &lt;table class=&quot;table table-bordered table-striped text-center&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;用户名&lt;/th&gt; &lt;th&gt;年龄&lt;/th&gt; &lt;th&gt;毕业学校&lt;/th&gt; &lt;th&gt;备注&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;template v-for=&quot;(row, index) in rows &quot;&gt; &lt;tr v-if=&quot;index&gt;=(curpage-1)*pagesize&amp;&amp;index&lt;curpage*pagesize&quot;&gt; &lt;td&gt;&#123;&#123;row.Name&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;row.Age&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;row.School&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;row.Remark&#125;&#125;&lt;/td&gt; &lt;/tr&gt; &lt;/template&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;nav style=&quot;float:right;&quot;&gt; &lt;ul class=&quot;pagination pagination-lg&quot;&gt; &lt;template v-for=&quot;page in Math.ceil(rows.length/pagesize)&quot;&gt; &lt;li v-on:click=&quot;PrePage()&quot; id=&quot;prepage&quot; v-if=&quot;page==1&quot; class=&quot;disabled&quot;&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt; &lt;li v-if=&quot;page==1&quot; class=&quot;active&quot; v-on:click=&quot;NumPage(page, $event)&quot;&gt;&lt;a href=&quot;#&quot;&gt;&#123;&#123;page&#125;&#125;&lt;/a&gt;&lt;/li&gt; &lt;li v-else v-on:click=&quot;NumPage(page, $event)&quot;&gt;&lt;a href=&quot;#&quot;&gt;&#123;&#123;page&#125;&#125;&lt;/a&gt;&lt;/li&gt; &lt;li id=&quot;nextpage&quot; v-on:click=&quot;NextPage()&quot; v-if=&quot;page==Math.ceil(rows.length/pagesize)&quot;&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt; &lt;/template&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;/div&gt; &lt;script src=&quot;Content/jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;Content/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; //Model var data = &#123; rows: [ &#123; Id: 1, Name: &apos;小明&apos;, Age: 18, School: &apos;光明小学&apos;, Remark: &apos;三好学生&apos; &#125;, &#123; Id: 2, Name: &apos;小刚&apos;, Age: 20, School: &apos;复兴中学&apos;, Remark: &apos;优秀班干部&apos; &#125;, &#123; Id: 3, Name: &apos;吉姆格林&apos;, Age: 19, School: &apos;光明小学&apos;, Remark: &apos;吉姆做了汽车公司经理&apos; &#125;, &#123; Id: 4, Name: &apos;李雷&apos;, Age: 25, School: &apos;复兴中学&apos;, Remark: &apos;不老实的家伙&apos; &#125;, &#123; Id: 5, Name: &apos;韩梅梅&apos;, Age: 22, School: &apos;光明小学&apos;, Remark: &apos;在一起&apos; &#125;, ], pagesize: 2, curpage:1,//当前页的页码 &#125;; //ViewModel var vue = new Vue(&#123; el: &apos;#app&apos;, data: data, methods: &#123; //上一页方法 PrePage: function (event) &#123; $(&quot;.pagination .active&quot;).prev().trigger(&quot;click&quot;); &#125;, //下一页方法 NextPage: function (event) &#123; $(&quot;.pagination .active&quot;).next().trigger(&quot;click&quot;); &#125;, //点击页码的方法 NumPage: function (num, event) &#123; if (this.curpage == num) &#123; return; &#125; this.curpage = num; $(&quot;.pagination li&quot;).removeClass(&quot;active&quot;); if (event.target.tagName.toUpperCase() == &quot;LI&quot;) &#123; $(event.target).addClass(&quot;active&quot;); &#125; else &#123; $(event.target).parent().addClass(&quot;active&quot;); &#125; if (this.curpage == 1) &#123; $(&quot;#prepage&quot;).addClass(&quot;disabled&quot;); &#125; else &#123; $(&quot;#prepage&quot;).removeClass(&quot;disabled&quot;); &#125; if (this.curpage == Math.ceil(this.rows.length / this.pagesize)) &#123; $(&quot;#nextpage&quot;).addClass(&quot;disabled&quot;); &#125; else &#123; $(&quot;#nextpage&quot;).removeClass(&quot;disabled&quot;); &#125; &#125; &#125; &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 来看看效果吧： 什么，数据少了不过瘾？那我们加一点数据试试呗。调整一下data变量，其他不用做任何变化。 1234567891011121314151617181920212223242526var data = &#123; rows: [ &#123; Id: 1, Name: &apos;小明&apos;, Age: 18, School: &apos;光明小学&apos;, Remark: &apos;三好学生&apos; &#125;, &#123; Id: 2, Name: &apos;小刚&apos;, Age: 20, School: &apos;复兴中学&apos;, Remark: &apos;优秀班干部&apos; &#125;, &#123; Id: 3, Name: &apos;吉姆格林&apos;, Age: 19, School: &apos;光明小学&apos;, Remark: &apos;吉姆做了汽车公司经理&apos; &#125;, &#123; Id: 4, Name: &apos;李雷&apos;, Age: 25, School: &apos;复兴中学&apos;, Remark: &apos;不老实的家伙&apos; &#125;, &#123; Id: 5, Name: &apos;韩梅梅&apos;, Age: 22, School: &apos;光明小学&apos;, Remark: &apos;在一起&apos; &#125;, &#123; Id: 1, Name: &apos;小明&apos;, Age: 18, School: &apos;光明小学&apos;, Remark: &apos;三好学生&apos; &#125;, &#123; Id: 2, Name: &apos;小刚&apos;, Age: 20, School: &apos;复兴中学&apos;, Remark: &apos;优秀班干部&apos; &#125;, &#123; Id: 3, Name: &apos;吉姆格林&apos;, Age: 19, School: &apos;光明小学&apos;, Remark: &apos;吉姆做了汽车公司经理&apos; &#125;, &#123; Id: 4, Name: &apos;李雷&apos;, Age: 25, School: &apos;复兴中学&apos;, Remark: &apos;不老实的家伙&apos; &#125;, &#123; Id: 5, Name: &apos;韩梅梅&apos;, Age: 22, School: &apos;光明小学&apos;, Remark: &apos;在一起&apos; &#125;, &#123; Id: 1, Name: &apos;小明&apos;, Age: 18, School: &apos;光明小学&apos;, Remark: &apos;三好学生&apos; &#125;, &#123; Id: 2, Name: &apos;小刚&apos;, Age: 20, School: &apos;复兴中学&apos;, Remark: &apos;优秀班干部&apos; &#125;, &#123; Id: 3, Name: &apos;吉姆格林&apos;, Age: 19, School: &apos;光明小学&apos;, Remark: &apos;吉姆做了汽车公司经理&apos; &#125;, &#123; Id: 4, Name: &apos;李雷&apos;, Age: 25, School: &apos;复兴中学&apos;, Remark: &apos;不老实的家伙&apos; &#125;, &#123; Id: 5, Name: &apos;韩梅梅&apos;, Age: 22, School: &apos;光明小学&apos;, Remark: &apos;在一起&apos; &#125;, &#123; Id: 1, Name: &apos;小明&apos;, Age: 18, School: &apos;光明小学&apos;, Remark: &apos;三好学生&apos; &#125;, &#123; Id: 2, Name: &apos;小刚&apos;, Age: 20, School: &apos;复兴中学&apos;, Remark: &apos;优秀班干部&apos; &#125;, &#123; Id: 3, Name: &apos;吉姆格林&apos;, Age: 19, School: &apos;光明小学&apos;, Remark: &apos;吉姆做了汽车公司经理&apos; &#125;, &#123; Id: 4, Name: &apos;李雷&apos;, Age: 25, School: &apos;复兴中学&apos;, Remark: &apos;不老实的家伙&apos; &#125;, &#123; Id: 5, Name: &apos;韩梅梅&apos;, Age: 22, School: &apos;光明小学&apos;, Remark: &apos;在一起&apos; &#125;, ], pagesize: 6, curpage:1,//当前页的页码 &#125;; 测试效果： 如果再进一步封装，是不是有点分页组件的概念了。简单吧！当然，这只是为了体现常用指令而提供的一个实现思路，可能很多地方都有待优化，待深入研究组件之后再进一步封装。 五、总结以上学习了下Vue的一些常用指令，基本都是些比较常用的，等下篇有时间再来研究下它的一些高级功能。如果你也对它有兴趣，用起来试试吧！博主觉得它的文档还是挺全的。 如果你觉得本文能够帮助你，可以在下边随意 打赏 博主。你的支持是博主继续坚持的不懈动力。 内容参考：原创]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用hexo+github从零开始到搭建完整的个人博客]]></title>
    <url>%2F2017%2F07%2F19%2F%E4%BD%BF%E7%94%A8hexo-github%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B0%E6%90%AD%E5%BB%BA%E5%AE%8C%E6%95%B4%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[1. 安装Git Bash. 下载地址. 安装步骤：双击下载好的exe文件，一路next就好啦. 安装好后，打开gitbash，查看版本：命令: git version 文字 然后你就可以在这里发挥你的聪明才智了2. 安装NodeJsHexo是基于nodeJS环境的静态博客，里面的npm工具很有用啊，所以还是老老实实把这玩意儿装了吧 . 下载地址. 安装步骤：反正下载好msi文件后，双击打开安装，也是一路next，不过在Custom Setup这一步记得选 Add to PATH ,这样你就不用自己去配置电脑上环境变量了，装完在按 win + r 快捷键调出运行，然后输入cmd确定，在cmd中输入path可以看到你的node是否配置在里面（环境变量），没有的话你就自由发挥吧。. 查看版本：&emsp;&emsp; . 命令：node -v 又到自由发挥的时候了3. 安装hexo看到这么多安装，千万不要紧张，一定要稳住，别怕，因为后面的东西都是在gitbash中用npm工具安装就好了。 . 先创建一个文件夹（用来存放所有blog的东西），然后++cd++到该文件夹下。. 安装hexo命令：npm i -g hexo. 安装完成后，查看版本： . 初始化命令：hexo init ，初始化完成之后打开所在的文件夹可以看到以下文件： . 解释一下：&emsp;&emsp; . node_modules：是依赖包&emsp;&emsp; . public：存放的是生成的页面&emsp;&emsp; . scaffolds：命令生成文章等的模板&emsp;&emsp; . source：用命令创建的各种文章&emsp;&emsp; . themes：主题&emsp;&emsp; . _config.yml：整个博客的配置&emsp;&emsp; . db.json：source解析所得到的&emsp;&emsp; . package.json：项目所需模块项目的配置信息. 做好这些前置工作之后接下来的就是各种配配配置了。4. 搭桥到github. 没账号的创建账号，有账号的看下面。 创建一个repo，名称为++yourname.github.io++其中yourname是你的github名称，按照这个规则创建才有用哦，如下： 5. 一步之遥. 用编辑器打开你的blog项目，修改_config.yml文件的一些配置(冒号之后都是有一个半角空格的)：1234deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master . 回到gitbash中，进入你的blog目录，分别执行以下命令：123hexo cleanhexo generatehexo server 注：hexo 3.0把服务器独立成个别模块，需要单独安装：npm i hexo-server。. 打开浏览器输入：http://localhost:4000. 接着你就可以遇见天使的微笑了~6. 上传到github. 先安装一波：npm install hexo-deployer-git –save（这样才能将你写好的文章部署到github服务器上并让别人浏览到）. 执行命令(建议每次都按照如下步骤部署)：123hexo cleanhexo generatehexo deploy 注意deploy的过程中要输入你的username及passward。. 在浏览器中输入http://yourgithubname.github.io就可以看到你的个人博客啦，是不是很兴奋！. 感觉gitbash中东西太多的时候输入clear命令清空。7. 绑定个人域名. 不想绑定的自行忽略. 第一步购买域名：随便在哪个网站买一个就好了，我是在阿里云购买的shiyawei.com，欢迎访问。. 第二步添加CNAME：在项目的source文件夹下新建一个名为CNAME的文件，在里面添加你购买的域名，比如我添加的是shiyawei.com只能添加一个哦。. 到DNS中添加一条记录： . 接着再次部署一下，用你购买的域名打开，就可以看到你的博客啦~8 .写文章部分. 新建文章：hexo new ‘文章名’，然后你就可以在source/_posts路径下看到你创建的文章啦，编辑完成之后按照前面说的方式部署，在浏览器刷新就能看到你的文章了。. [关于具体的文章编辑你可以看下官网的介绍. 至于markdown，可以自行发挥啦~]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue-7种定义组件模板的方法]]></title>
    <url>%2F2017%2F07%2F15%2FVue-7%E7%A7%8D%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E6%A8%A1%E6%9D%BF%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Vue-7种定义组件模板的方法vue中定义模板组7种不同的方法： 字符串（String） 模板字符串（Template literal） X-Templates 内联（Inline） Render函数（Render functions） JSX 单文件组件（Single page components） 在这篇文章里，我们将会展示每一个方法的示例，分析其优缺点，以便你能明白在特定的情形下，哪种方式是合适的。 1. 字符串默认情况下，在JS文件里模板会被定义为一个字符串。但是我觉得大家都会同意这种写法很难看懂，它除了有广泛的浏览器支持之外，并没有什么优势。 123456789Vue.component(&apos;my-checkbox&apos;, &#123; template: &apos;&lt;div class=&quot;checkbox-wrapper&quot; @click=&quot;check&quot;&gt;&lt;div :class=&quot;&#123; checkbox: true, checked: checked &#125;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;title&quot;&gt;&#123;&#123; title &#125;&#125;&lt;/div&gt;&lt;/div&gt;&apos;, data() &#123; return &#123; checked: false, title: &apos;Check me&apos; &#125; &#125;, methods: &#123; check() &#123; this.checked = !this.checked; &#125; &#125;&#125;); 2. 模板字符串（Template literals）通过ES6的模板字符串（反引号）语法，你在定义模板时可以直接换行，这是通过常规的JavaScript字符串没法做到的。这种写法更容易阅读，并且这种模板字符串语法得到了许多新版本浏览器的支持。当然，为了安全起见，你仍然应该把它转译为ES5的语法形式。 然而，这种方式并不完美，我发现大多数的IDE在语法高亮上做的差强人意，并且在缩进和换行等的格式方面，仍然很痛苦。 123456789101112Vue.component(&apos;my-checkbox&apos;, &#123; template: `&lt;div class=&quot;checkbox-wrapper&quot; @click=&quot;check&quot;&gt; &lt;div :class=&quot;&#123; checkbox: true, checked: checked &#125;&quot;&gt;&lt;/div&gt; &lt;div class=&quot;title&quot;&gt;&#123;&#123; title &#125;&#125;&lt;/div&gt; &lt;/div&gt;`, data() &#123; return &#123; checked: false, title: &apos;Check me&apos; &#125; &#125;, methods: &#123; check() &#123; this.checked = !this.checked; &#125; &#125;&#125;); 3. X-Templates使用这种方法，你需要在index.html文件里的script标签中定义你的模板。script标签需要添加text/x-template类型作为标记，并且在定义组件时，通过id来引用。 我喜欢这种方式，它允许你使用真正的HTML标记来书写你的HTML文件，但是不足之处在于，这种方式会把模板和组件其它部分的定义分开。 123456789Vue.component(&apos;my-checkbox&apos;, &#123; template: &apos;#checkbox-template&apos;, data() &#123; return &#123; checked: false, title: &apos;Check me&apos; &#125; &#125;, methods: &#123; check() &#123; this.checked = !this.checked; &#125; &#125;&#125;); 123456&lt;script type=&quot;text/x-template&quot; id=&quot;checkbox-template&quot;&gt; &lt;div class=&quot;checkbox-wrapper&quot; @click=&quot;check&quot;&gt; &lt;div :class=&quot;&#123; checkbox: true, checked: checked &#125;&quot;&gt;&lt;/div&gt; &lt;div class=&quot;title&quot;&gt;&#123;&#123; title &#125;&#125;&lt;/div&gt; &lt;/div&gt;&lt;/script&gt; 4. 内联模板（Inline Templates）通过给组件添加inline-template属性来告诉Vue，里面的内容就是模板，而不是把它当作是分发内容(见 slots)。 它的缺点和x-templates一样，但是有一个优点就是，它的内容就在HTML模板对应的位置，所以页面一加载就会渲染，而不用等到JavaScript执行。 12345678Vue.component(&apos;my-checkbox&apos;, &#123; data() &#123; return &#123; checked: false, title: &apos;Check me&apos; &#125; &#125;, methods: &#123; check() &#123; this.checked = !this.checked; &#125; &#125;&#125;); 123456&lt;my-checkbox inline-template&gt; &lt;div class=&quot;checkbox-wrapper&quot; @click=&quot;check&quot;&gt; &lt;div :class=&quot;&#123; checkbox: true, checked: checked &#125;&quot;&gt;&lt;/div&gt; &lt;div class=&quot;title&quot;&gt;&#123;&#123; title &#125;&#125;&lt;/div&gt; &lt;/div&gt;&lt;/my-checkbox&gt; 5. Render functions（渲染函数）渲染函数需要你把模板当作一个JavaScript对象来进行定义，它们是一些复杂并且抽象的模板选项。 然而，它的优点是你定义的模板更接近编译器，你可以使用所有JavaScript方法，而不仅是指令提供的那些功能。 1234567891011121314151617181920212223242526272829303132333435363738394041Vue.component(&apos;my-checkbox&apos;, &#123; data() &#123; return &#123; checked: false, title: &apos;Check me&apos; &#125; &#125;, methods: &#123; check() &#123; this.checked = !this.checked; &#125; &#125;, render(createElement) &#123; return createElement( &apos;div&apos;, &#123; attrs: &#123; &apos;class&apos;: &apos;checkbox-wrapper&apos; &#125;, on: &#123; click: this.check &#125; &#125;, [ createElement( &apos;div&apos;, &#123; &apos;class&apos;: &#123; checkbox: true, checked: this.checked &#125; &#125; ), createElement( &apos;div&apos;, &#123; attrs: &#123; &apos;class&apos;: &apos;title&apos; &#125; &#125;, [ this.title ] ) ] ); &#125;&#125;); 6. JSXVue中最有争议性的模板选项就是JSX，一些开发者认为JSX语法太丑，不直观，而且和Vue的简洁特性背道而驰。 JSX需要事先编译，因为浏览器并不支持JSX。但是如果你需要使用渲染函数，那么JSX语法绝对是一种更简洁的定义模板的方法。 1234567891011121314Vue.component(&apos;my-checkbox&apos;, &#123; data() &#123; return &#123; checked: false, title: &apos;Check me&apos; &#125; &#125;, methods: &#123; check() &#123; this.checked = !this.checked; &#125; &#125;, render() &#123; return &lt;div class=&quot;checkbox-wrapper&quot; onClick=&#123; this.check &#125;&gt; &lt;div class=&#123;&#123; checkbox: true, checked: this.checked &#125;&#125;&gt;&lt;/div&gt; &lt;div class=&quot;title&quot;&gt;&#123; this.title &#125;&lt;/div&gt; &lt;/div&gt; &#125;&#125;); 7. 单文件组件（Single File Components）只要你愿意在项目中使用构建工具，那么单文件组件绝对是这些方法中的首选。它们有两个最好的优点：允许你使用标记，同时把所有组件定义都写在一个文件中。 尽管单文件组件需要编译，并且一些IDE不支持这种类型文件的语法高亮，但它仍然很难被其它方法战胜。 12345678910111213141516&lt;template&gt; &lt;div class=&quot;checkbox-wrapper&quot; @click=&quot;check&quot;&gt; &lt;div :class=&quot;&#123; checkbox: true, checked: checked &#125;&quot;&gt;&lt;/div&gt; &lt;div class=&quot;title&quot;&gt;&#123;&#123; title &#125;&#125;&lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; data() &#123; return &#123; checked: false, title: &apos;Check me&apos; &#125; &#125;, methods: &#123; check() &#123; this.checked = !this.checked; &#125; &#125; &#125;&lt;/script&gt; 本文转载自：众成翻译]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git基本使用]]></title>
    <url>%2F2017%2F06%2F19%2Fgit%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[git 基本使用 安装msysgit 下载地址：msysgit，安装完成后配置系统环境变量，打开git bash，尽量少用图形化工具git gui，推荐使用命令行。 你可以在本地操作git，也可以在远程服务器仓库操作git，例如github，这样你就需要配置下ssh key，详情请查看官方文档说明generating-ssh-keys git操作 1、检出仓库（克隆仓库）本地克隆： 1$ git clone git仓库地址 远程克隆： 1$ git clone server仓库地址 ssh方式(推荐)，例如： 1$ git clone git@github.com:hcy2367/hcy2367.github.io.git https方式，例如： 1$ git clone https://github.com/hcy2367/hcy2367.github.io.git 2、创建新仓库1$ git init 3、添加工作区（working dir）新的或改动的文件到暂存区（Index或stage）1$ git add &lt;filename&gt; | --all | -A | . git工作区，暂存区，HEAD区（可以理解为本地仓库master分支的最新版本）关系图： 4、从暂存区删除添加或改动的的文件1$ git rm --cached &lt;filename&gt; | * 5、查看当前仓库状态执行add、commit操作之前和之后最好都要查看下当前提交的一些状态信息，防止漏添加，错提交 1$ git status 6、查看和对比修改的内容1$ git diff &lt;filename&gt; 7、查看提交的历史记录版本（添加参数：–pretty=oneline，用于输出少量信息）1$ git log 8、提交到当前分支master HEAD区1$ git commit -m &apos;代码提交信息&apos; 9、版本回退HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，往上100个版本HEAD~100，如回退到上一个版本，则命令如下： 1$ git reset --hard HEAD^ 其中–hard参数表示撤销工作区与暂存区的修改，回退到指定历史版本，可使用如下命令： 1$ git reset --hard 20038 其中20038为提交版本的前五位ID号（原始：20038c521d4e81aca8ec8bca9f05d50ebb4fb835），查看时可使用如下命令： 1$ git reflog 10、撤销修改丢弃工作区的修改，已添加到暂存区的文件不受影响，注意：不能少了–参数，命令如下： 12345$ git checkout -- &lt;filename&gt; | *撤销所有修改$ git checkout . 把暂存区的修改撤销掉，重新放回工作区，命令如下： 1$ git reset HEAD &lt;filename&gt; | * 11、删除文件删除后再commit到HEAD区，如果误删文件了，可以恢复到该文件的最新版本。 1$ git rm &lt;filename&gt; 12、推送到远端仓库1$ git push -u origin master | &lt;branch&gt; -u参数表示初次推送时把本地的master分支和远程的master分支关联起来； 如果你还没有克隆现有仓库，并欲将你的本地仓库连接到某个远程服务器，你可以使用如下命令添加： 1$ git remote add origin &lt;server&gt; 例如这样你就能够将你的改动推送到所添加的服务器上去了： 1$ git remote add origin git@github.com:hcy2367/hcy2367.github.io.git 13、分支 创建分支并切换到新建分支： 1$ git checkout -b &lt;branch&gt; 切换回主分支： 1$ git checkout master 列出所有分支： 1$ git branch 列出所有远程分支： 1$ git branch -a 合并指定分支到当前分支（默认使用fast forward方式）： 1$ git merge &lt;branch&gt; 普通模式合并（禁用fast forward，因为该方式合并后看不到历史提交信息）： 1$ git merge --no-ff -m &quot;merge with no-ff&quot; &lt;branch&gt; 删除分支： 1$ git branch -d &lt;branch&gt; 丢弃一个没有被合并过的分支，可以通过如下命令强行删除： 1$ git branch -D &lt;branch&gt; 推送到远端仓库： 1$ git push origin &lt;branch&gt; 14、更新与合并查看远程信息： 1$ git remote -v 从远程获取最新版本到本地仓库，并自动merge到本地分支： 1$ git pull origin master 从远程获取最新版本到本地仓库，不自动merge到本地分支： 1$ git fetch 合并分支前先到另外一个分支更新代码，然后本地合并后提交到远程仓库； 当有冲突时，可使用$ git diff或$ git status命令查看分支的差异，手工解决后，再执行$ git add &lt;filename&gt;命令以将它们标记为合并成功。查看提交记录图形信息： 1$ git log --graph --pretty=oneline --abbrev-commit 15、标签（可以理解为版本库的快照）创建标签： 1$ git tag &lt;tagname&gt; 可使用命令如下命令找到历史提交的ID号： 1$ git log --pretty=oneline --abbrev-commit 再打标签： 1$ git tag v1.0 6224937 还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字： 1$ git tag -a v1.1 -m &quot;version 1.1 released&quot; 3628164 查看标签： 1$ git tag 查看标签信息： 1$ git show v1.0 删除本地标签： 1$ git tag -d v1.1 推送标签到远程： 1$ git push origin &lt;tagname&gt; 一次性推送全部未推送的标签： 1$ git push origin --tags 删除远程标签（先删除本地，再删除对应的远程tag）： 12$ git tag -d v1.1$ git push origin :refs/tags/v1.1 16、丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它：12$ git fetch origin$ git reset --hard origin/master 17、移除所有未跟踪文件（一般会加上参数-df，-d表示包含目录，-f表示强制清除）1$ git clean [options] 18、多人协作的工作模式 首先，可以试图用$ git push origin &lt;branch&gt;推送自己的修改； 如果推送失败，则因为远程分支比你的本地更新，需要先用$ git pull试图合并； 如果合并有冲突，则解决冲突，并在本地提交； 没有冲突或者解决掉冲突后，再用$ git push origin &lt;branch&gt;推送就能成功； 如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令$ git branch --set-upstream &lt;branch&gt; origin/&lt;branch&gt;解决即可。 19、git工作流程图说了这么多，来张工作图，可能更加通俗易懂： 总结 掌握上面的命令后基本上可以轻松使用git来管理项目和参与团队开发了，当你欣赏到git的过人和可爱之处后，你可能再也不想使用svn来管理代码了，熟悉操作后你就可以遨翔于github、gitcafe、gitlab的天空，为开源生态圈贡献自己的一份力量。不管是fork，star，clone，还是pull request，总要尝试下未知的世界。 人一定要靠自己]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js如何获取服务器端时间]]></title>
    <url>%2F2017%2F03%2F20%2Fjs%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%97%B6%E9%97%B4%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[| js如何获取服务器端时间？用js做时间校正，获取本机时间，是存在bug的。 使用js也可获取到服务器时间，原理是使用 ajax请求，返回的头部信息就含有服务器端的时间信息，获取到就可以了。以下： 1、依赖jQuery代码： 123function getServerDate()&#123; return new Date($.ajax(&#123;async: false&#125;).getResponseHeader(&quot;Date&quot;));&#125; 以上函数返回的就是一个Date对象，注意在使用ajax时必须同步，要不然无法返回时间日期。 无需填写请求链接； 如果服务器时间和本地时间有时差，需要做校正。 2、原生代码： 12345678910111213function getServerDate()&#123; var xhr = null; if(window.XMLHttpRequest)&#123; xhr = new window.XMLHttpRequest(); &#125;else&#123; // ie xhr = new ActiveObject(&quot;Microsoft&quot;) &#125; xhr.open(&quot;GET&quot;,&quot;/&quot;,false)//false不可变 xhr.send(null); var date = xhr.getResponseHeader(&quot;Date&quot;); return new Date(date);&#125; 同样返回的是一个Date对象，xhr.open()必须使用同步; 无需填写请求链接;open，send，和getResponseHeader 必须按序编写。 如需使用异步请求，可监听onreadystatechange状态来做不同的操作。 12345678910111213141516171819function getServerDate()&#123; var xhr = null; if(window.XMLHttpRequest)&#123; xhr = new window.XMLHttpRequest(); &#125;else&#123; // ie xhr = new ActiveObject(&quot;Microsoft&quot;) &#125; xhr.open(&quot;GET&quot;,&quot;/&quot;,true); xhr.send(null); xhr.onreadystatechange=function()&#123; var time,date; if(xhr.readyState == 2)&#123; time = xhr.getResponseHeader(&quot;Date&quot;); date = new Date(time); console.log(date); &#125; &#125;&#125; 使用异步不是很方便返回时间。 这里的readyState有四种状态，方便做不同处理： 0: 请求未初始化1: 服务器连接已建立2: 请求已接收3: 请求处理中4: 请求已完成，且响应已就绪失败状态，status的值： 200: “OK” 404: 未找到页面]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javaScript-浏览器版本、操作系统、内核、设备判断]]></title>
    <url>%2F2017%2F03%2F15%2FjavaScript-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%89%88%E6%9C%AC%E3%80%81%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%81%E5%86%85%E6%A0%B8%E3%80%81%E8%AE%BE%E5%A4%87%E5%88%A4%E6%96%AD%2F</url>
    <content type="text"><![CDATA[javaScript-获取浏览器版本、操作系统、内核、设备信息 先引入Broeser.js。 调用： 查看有哪些属性？ 1234567891011121314var info = new Browser();//页面输出浏览器各个信息：document.writeln(&quot;浏览器：&quot;+info.browser+&quot;&lt;br/&gt;&quot;);document.writeln(&quot;版本：&quot;+info.version+&quot;&lt;br/&gt;&quot;);document.writeln(&quot;内核：&quot;+info.engine+&quot;&lt;br/&gt;&quot;);document.writeln(&quot;操作系统：&quot;+info.os+&quot;&lt;br/&gt;&quot;);document.writeln(&quot;设备：&quot;+info.device+&quot;&lt;br/&gt;&quot;);document.writeln(&quot;语言：&quot;+info.language+&quot;&lt;br/&gt;&quot;); //控制台查看所有浏览器信息console.log(info) 移动端和pc端判断 12345678var info = new Browser();//pc端和移动端判断if(info.device == &apos;PC&apos;)&#123; alert(&apos;pc端&apos;)&#125;else&#123; alert(&apos;移动端&apos;)&#125; 安卓系统和ios判断 或其他系统判断查看（Broeser.js）代码 123456789var info = new Browser();//安卓系统和ios判断if(info.os === &apos;iOS&apos;)&#123; alert(&apos;ios&apos;)&#125;if(info.os === &apos;Android&apos;)&#123; alert(&apos;Android&apos;)&#125;]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F01%2F19%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>