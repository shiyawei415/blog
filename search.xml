<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用hexo+github从零开始到搭建完整的个人博客]]></title>
    <url>%2F2017%2F07%2F19%2F%E4%BD%BF%E7%94%A8hexo-github%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B0%E6%90%AD%E5%BB%BA%E5%AE%8C%E6%95%B4%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[1. 安装Git Bash. 下载地址. 安装步骤：双击下载好的exe文件，一路next就好啦. 安装好后，打开gitbash，查看版本：命令：==git version== 然后你就可以在这里发挥你的聪明才智了2. 安装NodeJsHexo是基于nodeJS环境的静态博客，里面的npm工具很有用啊，所以还是老老实实把这玩意儿装了吧 . 下载地址. 安装步骤：反正下载好msi文件后，双击打开安装，也是一路next，不过在Custom Setup这一步记得选 ==Add to PATH== ,这样你就不用自己去配置电脑上环境变量了，装完在按 ==win + r== 快捷键调出运行，然后输入cmd确定，在cmd中输入path可以看到你的node是否配置在里面（环境变量），没有的话你就自由发挥吧。. 查看版本：&emsp;&emsp; . 命令：==node -v== 又到自由发挥的时候了3. 安装hexo看到这么多安装，千万不要紧张，小哥哥小姐姐们一定要稳住，别怕，因为后面的东西都是在gitbash中用npm工具安装就好了。 . 先创建一个文件夹（用来存放所有blog的东西），然后==cd==到该文件夹下。. 安装hexo命令：==npm i -g hexo==. 安装完成后，查看版本： . 初始化命令：hexo init ，初始化完成之后打开所在的文件夹可以看到以下文件： . 解释一下：&emsp;&emsp; . node_modules：是依赖包&emsp;&emsp; . public：存放的是生成的页面&emsp;&emsp; . scaffolds：命令生成文章等的模板&emsp;&emsp; . source：用命令创建的各种文章&emsp;&emsp; . themes：主题&emsp;&emsp; . _config.yml：整个博客的配置&emsp;&emsp; . db.json：source解析所得到的&emsp;&emsp; . package.json：项目所需模块项目的配置信息. 做好这些前置工作之后接下来的就是各种配配配置了。4. 搭桥到github. 没账号的创建账号，有账号的看下面。 创建一个repo，名称为==yourname.github.io==其中yourname是你的github名称，按照这个规则创建才有用哦，如下： 5. 一步之遥. 用编辑器打开你的blog项目，修改_config.yml文件的一些配置(冒号之后都是有一个半角空格的)：1234deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master . 回到gitbash中，进入你的blog目录，分别执行以下命令：123hexo cleanhexo generatehexo server 注：hexo 3.0把服务器独立成个别模块，需要单独安装：npm i hexo-server。. 打开浏览器输入：http://localhost:4000. 接着你就可以遇见天使的微笑了~6. 上传到github. 先安装一波：npm install hexo-deployer-git –save（这样才能将你写好的文章部署到github服务器上并让别人浏览到）. 执行命令(建议每次都按照如下步骤部署)：123hexo cleanhexo generatehexo deploy 注意deploy的过程中要输入你的username及passward。. 在浏览器中输入http://yourgithubname.github.io就可以看到你的个人博客啦，是不是很兴奋！. 感觉gitbash中东西太多的时候输入clear命令清空。7. 绑定个人域名. 不想绑定的自行忽略. 第一步购买域名：随便在哪个网站买一个就好了，我是在阿里云购买的shiyawei.com，欢迎访问。. 第二步添加CNAME：在项目的source文件夹下新建一个名为CNAME的文件，在里面添加你购买的域名，比如我添加的是==shiyawei.com==只能添加一个哦。. 到DNS中添加一条记录： . 接着再次部署一下，用你购买的域名打开，就可以看到你的博客啦~8 .写文章部分. 新建文章：hexo new ‘文章名’，然后你就可以在source/_posts路径下看到你创建的文章啦，编辑完成之后按照前面说的方式部署，在浏览器刷新就能看到你的文章了。. [关于具体的文章编辑你可以看下官网的介绍. 至于markdown，可以自行发挥啦~]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git基本使用]]></title>
    <url>%2F2017%2F06%2F19%2Fgit%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[git 基本使用 安装msysgit 下载地址：msysgit，安装完成后配置系统环境变量，打开git bash，尽量少用图形化工具git gui，推荐使用命令行。 你可以在本地操作git，也可以在远程服务器仓库操作git，例如github，这样你就需要配置下ssh key，详情请查看官方文档说明generating-ssh-keys git操作 1、检出仓库（克隆仓库）本地克隆： 1$ git clone git仓库地址 远程克隆： 1$ git clone server仓库地址 ssh方式(推荐)，例如： 1$ git clone git@github.com:hcy2367/hcy2367.github.io.git https方式，例如： 1$ git clone https://github.com/hcy2367/hcy2367.github.io.git 2、创建新仓库1$ git init 3、添加工作区（working dir）新的或改动的文件到暂存区（Index或stage）1$ git add &lt;filename&gt; | --all | -A | . git工作区，暂存区，HEAD区（可以理解为本地仓库master分支的最新版本）关系图： 4、从暂存区删除添加或改动的的文件1$ git rm --cached &lt;filename&gt; | * 5、查看当前仓库状态执行add、commit操作之前和之后最好都要查看下当前提交的一些状态信息，防止漏添加，错提交 1$ git status 6、查看和对比修改的内容1$ git diff &lt;filename&gt; 7、查看提交的历史记录版本（添加参数：–pretty=oneline，用于输出少量信息）1$ git log 8、提交到当前分支master HEAD区1$ git commit -m &apos;代码提交信息&apos; 9、版本回退HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，往上100个版本HEAD~100，如回退到上一个版本，则命令如下： 1$ git reset --hard HEAD^ 其中–hard参数表示撤销工作区与暂存区的修改，回退到指定历史版本，可使用如下命令： 1$ git reset --hard 20038 其中20038为提交版本的前五位ID号（原始：20038c521d4e81aca8ec8bca9f05d50ebb4fb835），查看时可使用如下命令： 1$ git reflog 10、撤销修改丢弃工作区的修改，已添加到暂存区的文件不受影响，注意：不能少了–参数，命令如下： 12345$ git checkout -- &lt;filename&gt; | *撤销所有修改$ git checkout . 把暂存区的修改撤销掉，重新放回工作区，命令如下： 1$ git reset HEAD &lt;filename&gt; | * 11、删除文件删除后再commit到HEAD区，如果误删文件了，可以恢复到该文件的最新版本。 1$ git rm &lt;filename&gt; 12、推送到远端仓库1$ git push -u origin master | &lt;branch&gt; -u参数表示初次推送时把本地的master分支和远程的master分支关联起来； 如果你还没有克隆现有仓库，并欲将你的本地仓库连接到某个远程服务器，你可以使用如下命令添加： 1$ git remote add origin &lt;server&gt; 例如这样你就能够将你的改动推送到所添加的服务器上去了： 1$ git remote add origin git@github.com:hcy2367/hcy2367.github.io.git 13、分支 创建分支并切换到新建分支： 1$ git checkout -b &lt;branch&gt; 切换回主分支： 1$ git checkout master 列出所有分支： 1$ git branch 列出所有远程分支： 1$ git branch -a 合并指定分支到当前分支（默认使用fast forward方式）： 1$ git merge &lt;branch&gt; 普通模式合并（禁用fast forward，因为该方式合并后看不到历史提交信息）： 1$ git merge --no-ff -m &quot;merge with no-ff&quot; &lt;branch&gt; 删除分支： 1$ git branch -d &lt;branch&gt; 丢弃一个没有被合并过的分支，可以通过如下命令强行删除： 1$ git branch -D &lt;branch&gt; 推送到远端仓库： 1$ git push origin &lt;branch&gt; 14、更新与合并查看远程信息： 1$ git remote -v 从远程获取最新版本到本地仓库，并自动merge到本地分支： 1$ git pull origin master 从远程获取最新版本到本地仓库，不自动merge到本地分支： 1$ git fetch 合并分支前先到另外一个分支更新代码，然后本地合并后提交到远程仓库； 当有冲突时，可使用$ git diff或$ git status命令查看分支的差异，手工解决后，再执行$ git add &lt;filename&gt;命令以将它们标记为合并成功。查看提交记录图形信息： 1$ git log --graph --pretty=oneline --abbrev-commit 15、标签（可以理解为版本库的快照）创建标签： 1$ git tag &lt;tagname&gt; 可使用命令如下命令找到历史提交的ID号： 1$ git log --pretty=oneline --abbrev-commit 再打标签： 1$ git tag v1.0 6224937 还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字： 1$ git tag -a v1.1 -m &quot;version 1.1 released&quot; 3628164 查看标签： 1$ git tag 查看标签信息： 1$ git show v1.0 删除本地标签： 1$ git tag -d v1.1 推送标签到远程： 1$ git push origin &lt;tagname&gt; 一次性推送全部未推送的标签： 1$ git push origin --tags 删除远程标签（先删除本地，再删除对应的远程tag）： 12$ git tag -d v1.1$ git push origin :refs/tags/v1.1 16、丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它：12$ git fetch origin$ git reset --hard origin/master 17、移除所有未跟踪文件（一般会加上参数-df，-d表示包含目录，-f表示强制清除）1$ git clean [options] 18、多人协作的工作模式 首先，可以试图用$ git push origin &lt;branch&gt;推送自己的修改； 如果推送失败，则因为远程分支比你的本地更新，需要先用$ git pull试图合并； 如果合并有冲突，则解决冲突，并在本地提交； 没有冲突或者解决掉冲突后，再用$ git push origin &lt;branch&gt;推送就能成功； 如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令$ git branch --set-upstream &lt;branch&gt; origin/&lt;branch&gt;解决即可。 19、git工作流程图说了这么多，来张工作图，可能更加通俗易懂： 总结 掌握上面的命令后基本上可以轻松使用git来管理项目和参与团队开发了，当你欣赏到git的过人和可爱之处后，你可能再也不想使用svn来管理代码了，熟悉操作后你就可以遨翔于github、gitcafe、gitlab的天空，为开源生态圈贡献自己的一份力量。不管是fork，star，clone，还是pull request，总要尝试下未知的世界。 人一定要靠自己]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F01%2F19%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>